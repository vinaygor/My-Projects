/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Customer.Commercial;

import business.consumer.Sensor;
import business.consumer.StorageTank;
import business.consumer.WaterOutlet;
import business.enterprise.Enterprise;
import business.organization.CommercialMaintainenceUnitOrganization;
import business.organization.Organization;
import business.organization.ResidentialMaintainenceUnitOrganization;
import business.userAccount.UserAccount;
import business.workqueue.Maintainence.MaintainenceRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userInterface.Customer.Residential.ResidentialCustomerWorkAreaJPanel;

/**
 *
 * @author vinay
 */
public class CommercialCustomerTrackWaterUsageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CommercialCustomerTrackWaterUsageJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount account;
    private Thread t;
    private double storageTankCapacity;
     boolean rainWaterTank = true;
    boolean toSwitch = true;
    boolean emptyTank = true;
    DefaultTableModel statusMessage;
    boolean tempFlag=true;
    
    private DefaultTableModel model;
   
    
    public CommercialCustomerTrackWaterUsageJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account = account;
        model = (DefaultTableModel) waterOutletTrackTable.getModel();
       populateWaterOutletTable();
       populateStorageTankTable();
       statusMessage = (DefaultTableModel)messageStatusTable.getModel();
               
       
       if(account.getCustomer().isIsRainWaterTankInstalled()){
        double rainWaterStorage=Math.round((account.getCustomer().getRainWaterTank().getCapacity()*100.0));
           rainWaterTankCapacityTxtField.setText(String.valueOf(rainWaterStorage/100.0));        
         
    }
    }
    private void populateStorageTankTable()
   {
       DefaultTableModel model = (DefaultTableModel) storageTankTable.getModel();
       
       model.setRowCount(0);
       
       for (StorageTank s  : account.getCustomer().getConsumer().getStorageTanks())
       {
    
           Object[] row = new Object[2];
           row[0] = s; 
           row[1] = s.getCapacity();
           model.addRow(row);
       
       
       }       
   }

    private void populateWaterOutletTable() {
        DefaultTableModel model = (DefaultTableModel) waterOutletTable.getModel();
        
        model.setRowCount(0);
        
        for (WaterOutlet waterOutlet  : account.getCustomer().getConsumer().getWaterOutlets().getWaterOutlets()){
     
            Object[] row = new Object[1];
            row[0] = waterOutlet;                   
            model.addRow(row);
            
      
        
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageStatusTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        waterOutletTable = new javax.swing.JTable();
        startBtn = new javax.swing.JButton();
        initiateInspectionBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        waterOutletTrackTable = new javax.swing.JTable();
        stopBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rainWaterTankCapacityTxtField = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        refillStorageTank = new javax.swing.JButton();
        refillRainwaterTank = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        rainfallLevelTxtField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        possibleLeakageTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        storageTankTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel1.setText("My WaterOutlets");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel2.setText("Possible Leakages in Outlets");

        messageStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message Logs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(messageStatusTable);

        waterOutletTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WaterOutletName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(waterOutletTable);

        startBtn.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 16)); // NOI18N
        startBtn.setText("Start ");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        initiateInspectionBtn.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 16)); // NOI18N
        initiateInspectionBtn.setText("Initiate Inspection");
        initiateInspectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initiateInspectionBtnActionPerformed(evt);
            }
        });

        waterOutletTrackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WaterOutletName", "FlowRate", "PressureChange"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(waterOutletTrackTable);

        stopBtn.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 16)); // NOI18N
        stopBtn.setText("Stop");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel4.setText("Running Water Outlets");

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel5.setText("Storage Tank Capacity Level");

        jLabel6.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel6.setText("Rainwater Tank Capacity Level");

        rainWaterTankCapacityTxtField.setEditable(false);

        backBtn.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 16)); // NOI18N
        backBtn.setText("<< BACK");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        refillStorageTank.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 16)); // NOI18N
        refillStorageTank.setText("Refill Storage Tank");
        refillStorageTank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refillStorageTankActionPerformed(evt);
            }
        });

        refillRainwaterTank.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 16)); // NOI18N
        refillRainwaterTank.setText("Refill Rainwater Tank");
        refillRainwaterTank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refillRainwaterTankActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel7.setText("Rain Fall Level");

        jLabel8.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel8.setText("mm");

        possibleLeakageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "WaterOutletName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(possibleLeakageTable);

        storageTankTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Storage Tank Number", "Capacity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(storageTankTable);
        if (storageTankTable.getColumnModel().getColumnCount() > 0) {
            storageTankTable.getColumnModel().getColumn(0).setResizable(false);
            storageTankTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel9.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 20)); // NOI18N
        jLabel9.setText("My Water Usage Dashboard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startBtn)
                                .addGap(258, 258, 258)
                                .addComponent(refillStorageTank))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stopBtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(initiateInspectionBtn)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(rainfallLevelTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(rainWaterTankCapacityTxtField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(refillRainwaterTank)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(rainWaterTankCapacityTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(rainfallLevelTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addComponent(refillRainwaterTank))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(refillStorageTank))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(startBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopBtn)
                    .addComponent(initiateInspectionBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        Boolean flag = false;
        int selectedRow = waterOutletTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select the row");
            return;
        }
        else{
            WaterOutlet tempWaterOutlet = (WaterOutlet)waterOutletTable.getValueAt(selectedRow, 0);

            for(int i=0;i<waterOutletTrackTable.getRowCount();i++){
                if(tempWaterOutlet.equals(waterOutletTrackTable.getValueAt(i, 0)))
                {
                    flag=true;
                    JOptionPane.showMessageDialog(null,"You cannot start more than one instance of the same Water outlet","Warning!",0);
                }
            }
            int i=0;
            if(account.getCustomer().isIsRainWaterTankInstalled()){
                    if(account.getCustomer().getRainWaterTank().getCapacity()>account.getCustomer().getRainWaterTank().getLevelSensor())
                        flag=false;
                        }
            else{
            for(i=0;i<account.getCustomer().getConsumer().getStorageTanks().size();i++)
            {
                
                StorageTank st= account.getCustomer().getConsumer().getStorageTanks().get(i);
            if((st.getCapacity()>st.getLevelSensor()))
            {
                
                    break;
                
            }
            }
            }
            if(i==account.getCustomer().getConsumer().getStorageTanks().size()){
                flag = true;
                JOptionPane.showMessageDialog(null,"No water available in Tanks so water outlet cannot be started","Warning!",0);
            }
            if(!flag){
                start();
            }
        }
    }//GEN-LAST:event_startBtnActionPerformed

    private void initiateInspectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initiateInspectionBtnActionPerformed
        // TODO add your handling code here:

        MaintainenceRequest maintainenceRequest = new MaintainenceRequest();
        maintainenceRequest.setCustomer(account.getCustomer());
        maintainenceRequest.setCustomerRequest("Inspect leakage in Water Outlet");
        maintainenceRequest.setMessage("Inspect leakage in Water Outlet");
        maintainenceRequest.setStatus("Sent");
        maintainenceRequest.setPriority(2);
        maintainenceRequest.setSender(account);
        maintainenceRequest.setRequestDate(new Date());

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationsList().getOrganizationList()){
            if (organization instanceof CommercialMaintainenceUnitOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(maintainenceRequest);
            account.getWorkQueue().getWorkRequestList().add(maintainenceRequest);
        }

        JOptionPane.showMessageDialog(null,"A request for inspection has been initiated./nYou can check the status in your Dashboard", "Information", 1);

    }//GEN-LAST:event_initiateInspectionBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = waterOutletTrackTable.getSelectedRow();
        DefaultTableModel tempModel = (DefaultTableModel)waterOutletTrackTable.getModel();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select the row");
            return;
        }
        else{
            Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
            Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
            for(Thread thread : threadArray)
            if(thread.getName().equals(waterOutletTrackTable.getValueAt(selectedRow,0).toString())){
                //JOptionPane.showMessageDialog(null,thread.getThreadGroup());
                thread.interrupt();
                JOptionPane.showMessageDialog(null,"The Water outlet has been stopped Successfully!","Confirmation",1);

            }
            DefaultTableModel dt=(DefaultTableModel)waterOutletTrackTable.getModel();
            if(dt.getRowCount()>0)
            dt.removeRow(selectedRow);
        }
    }//GEN-LAST:event_stopBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CommercialCustomerWorkAreaJPanel dwjp = (CommercialCustomerWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void refillStorageTankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refillStorageTankActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"Main Storage Tank has been Refilled","Information",1);
       for(int i =0;i<account.getCustomer().getConsumer().getStorageTanks().size();i++)
       {
           account.getCustomer().getConsumer().getStorageTanks().get(i).setCapacity(account.getCustomer().getConsumer().getStorageTanks().get(i).getTotalCapacity());
       }
       populateStorageTankTable();
        emptyTank=true;
    }//GEN-LAST:event_refillStorageTankActionPerformed

    private void refillRainwaterTankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refillRainwaterTankActionPerformed
        // TODO add your handling code here:
        if(!rainfallLevelTxtField.getText().equals(""))
        {
        try{
        if(!account.getCustomer().isIsRainWaterTankInstalled())
            JOptionPane.showMessageDialog(null, "RainWater tank has not been installed yet!","Warning",0);
        else if(Double.parseDouble(rainfallLevelTxtField.getText())>=account.getCustomer().getRainWaterTank().getLevelSensor())
        {
            JOptionPane.showMessageDialog(null,"Rainwater Storage Tank has been Refilled","Information",1);
            account.getCustomer().getRainWaterTank().setCapacity(account.getCustomer().getConsumer().getStorageTanks().get(0).getTotalCapacity());
            double rainWaterStorage=Math.round((account.getCustomer().getRainWaterTank().getCapacity()*100.0));
            rainWaterTankCapacityTxtField.setText(String.valueOf(rainWaterStorage/100.0));

        }
        else
        {
            JOptionPane.showMessageDialog(null,"Rainwater Storage Tank cannot be Refilled as average rainfall is less","Error",2);
        }
        }
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null,"Rainwater level can only be in integer","Error",2);
            }
        }
        else
                JOptionPane.showMessageDialog(null,"Please provide input in the text field","Information",JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_refillRainwaterTankActionPerformed

     public void start(){
               
         t = new Thread(){
           //count=getCount();
            
//            double flowRateSample[]= new double[12];
//            double pressureRateSample[]= new double[12];
            
            int selectedRow = waterOutletTable.getSelectedRow();
        WaterOutlet waterOutlet =(WaterOutlet)waterOutletTable.getValueAt(selectedRow, 0);
     
        double flowRate = waterOutlet.getFlowRate(waterOutlet.getWaterOutletType());
        double pressureRate = waterOutlet.getWaterPressure(waterOutlet.getWaterOutletType());
//        double lowFlowRate = flowRate-0.5;
//        double templowFlowRate = lowFlowRate; 
//        double upperFlowRate = flowRate+0.5;
//
//        double lowPressureRate = pressureRate-0.05;
//        double templowPressureRate = lowPressureRate; 
//        double upperPressureRate = pressureRate+0.05;
    
        Sensor sensor = new Sensor();
     
    public void run(){
  
        sensor.setUpLimitsForSensors(flowRate, pressureRate);
        
        tempFlag=true;
        t.setName(waterOutlet.toString());
    try {
           Object[] row = new Object[3];
        row[0]=waterOutlet;
        row[1]=flowRate;
        row[2]=pressureRate;
        model.addRow(row);
        
        sensor.setUpSamplesForSensor();
          
           
      while(!Thread.currentThread().isInterrupted()){
        int rnd = new Random().nextInt(sensor.getFlowRateSample().length);  
      
        int rowCount=0;
       while(true && tempFlag){
       DefaultTableModel dtm = (DefaultTableModel)waterOutletTrackTable.getModel();
       if(dtm.getRowCount()>0)
       if(waterOutletTrackTable.getValueAt(rowCount, 0).equals(waterOutlet))
       break;
       rowCount++;
       }
       
       if(tempFlag){
        model.setValueAt(sensor.getFlowRateSample(rnd), rowCount, 1);
        model.setValueAt(sensor.getPressureRateSample(rnd), rowCount, 2);
       }
        //Reducing the capacity of Storage Tank
        //************************
        //--setting up logic for switching between Storage tank and RainWaterTank
        
        double setFlow = account.getCustomer().getConsumer().getStorageTank().getCapacity();
        
        if(account.getCustomer().isIsRainWaterTankInstalled() && account.getCustomer().getRainWaterTank().getCapacity()>account.getCustomer().getRainWaterTank().getLevelSensor()){
   
                {
   
                    rainWaterTank = false;
        {
            account.getCustomer().getRainWaterTank().setCapacity((account.getCustomer().getRainWaterTank().getCapacity()-sensor.getFlowRateSample(rnd)));        
              account.getCustomer().getConsumer().addIntoTrackWaterUsageMap(waterOutlet.getWaterOutletName(), sensor.getFlowRateSample(rnd));
              
              //Storing RainwaterTank utilization for all the wateroutlets
              account.getCustomer().setRainWaterTankUtilization(account.getCustomer().getRainWaterTankUtilization()+sensor.getFlowRateSample(rnd));
            double rainWaterStorage=Math.round((account.getCustomer().getRainWaterTank().getCapacity()*100.0));
           rainWaterTankCapacityTxtField.setText(String.valueOf(rainWaterStorage/100.0));        
        }
                } 
            
            
        }
        
        else
        {
            //System.out.println("Inside else");
                    if(toSwitch)
                    {
                        Object[] message=new Object[1];
                        message[0]="Switching to Main Storage Tank for Supply";
                        //JOptionPane.showMessageDialog(null,"Switching to Main Storage Tank for Supply","Information",1);
                        statusMessage.addRow(message);
                        toSwitch =false;
                    }
                    int index = 0;
                    for(StorageTank s:account.getCustomer().getConsumer().getStorageTanks())
                    {
                        if(s.getCapacity()>s.getLevelSensor())
                        break;
                        index++;    
                    }
                    if(index==account.getCustomer().getConsumer().getStorageTanks().size())
                    {
                                   // System.out.println("Inside stopping:"+t.getName()+"-"+t.getId());
                                  if(emptyTank)
                                     {      
                                         SimpleDateFormat sdf=new SimpleDateFormat("yyyy/MM/dd hh:mm");
                                         Object[] emptyMessage=new Object[1];
                                         emptyMessage[0]=sdf.format(new Date())+" :Main Storage Tank is getting empty. STOPPING all Outlets";
                                         //JOptionPane.showMessageDialog(null,"Main Storage Tank is getting empty. STOPPING all Outlets","Information",1);
                                         statusMessage.addRow(emptyMessage);
                                         emptyTank = false;                                       
                                     }
                                  
                                
                              
                                  tempFlag=false;
                                  
//                                  Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
//                                  Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
//                                  for(Thread thread :threadArray)
//                                  {
                           // System.out.println("Stopping the thread...NOW");
                            if(!t.interrupted()){
                                
                                 Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
       Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
       
       
           //for(int i=0;i<waterOutletTable.getRowCount();i++)
           for(Thread thread : threadArray)
       if(thread.getName().equals(waterOutletTrackTable)){
      // System.out.println("Inside of Stopping thread");
           t.interrupt();
          // System.out.println("Thread stopped");
       }
                            }
                                      if(!tempFlag){
                                DefaultTableModel temporaryModel = (DefaultTableModel)waterOutletTrackTable.getModel();
                                /*for(int i=temporaryModel.getRowCount()-1;i>-1;i--){
                                      temporaryModel.removeRow(i);*/
                            if(temporaryModel.getRowCount()>0)          
                                temporaryModel.removeRow(0);
                                      }
      
                                      //thread.interrupt();
                                  //}
                                      //throw new InterruptedException();
                                  
                                    
                             
                    }
                    else
                    {
                      account.getCustomer().getConsumer().getStorageTanks().get(index).setCapacity(((
                              account.getCustomer().getConsumer().getStorageTanks().get(index).getCapacity()-sensor.getFlowRateSample(rnd))));
                        account.getCustomer().getConsumer().addIntoTrackWaterUsageMap(waterOutlet.getWaterOutletName(), sensor.getFlowRateSample(rnd));
                        account.getCustomer().setStorageTankUtilization(account.getCustomer().getStorageTankUtilization()+sensor.getFlowRateSample(rnd));
                        storageTankCapacity = Math.round(account.getCustomer().getConsumer().getStorageTank().getCapacity()*100);
                        populateStorageTankTable();
                    }
//                    if(account.getCustomer().getConsumer().getStorageTank().getCapacity()>50.0)
//                                {
//                                    account.getCustomer().getConsumer().getStorageTank().setCapacity(((account.getCustomer().getConsumer().getStorageTank().getCapacity()-flowRateSample[rnd])));   
//                                    account.getCustomer().getConsumer().addIntoTrackWaterUsageMap(waterOutlet.getWaterOutletName(), flowRateSample[rnd]);
//                                   //Setting StorageTank Utilization for all the WaterOutlets
//                                    account.getCustomer().setStorageTankUtilization(account.getCustomer().getStorageTankUtilization()+flowRateSample[rnd]);
//                                    storageTankCapacity = Math.round(account.getCustomer().getConsumer().getStorageTank().getCapacity()*100);
//                                   // storageTankCapacityTxtField.setText(String.valueOf((storageTankCapacity/100.0)));
//                                }
//                                else
//                                {
//                                System.out.println("Inside stopping:"+t.getName()+"-"+t.getId());
//                                  if(emptyTank)
//                                     {      
//                                         SimpleDateFormat sdf=new SimpleDateFormat("yyyy/MM/dd hh:mm");
//                                         Object[] emptyMessage=new Object[1];
//                                         emptyMessage[0]=sdf.format(new Date())+" :Main Storage Tank is getting empty. STOPPING all Outlets";
//                                         //JOptionPane.showMessageDialog(null,"Main Storage Tank is getting empty. STOPPING all Outlets","Information",1);
//                                         statusMessage.addRow(emptyMessage);
//                                         emptyTank = false;                                       
//                                     }
//                                  
//                                
//                              
//                                  tempFlag=false;
//                                  
////                                  Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
////                                  Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
////                                  for(Thread thread :threadArray)
////                                  {
//                            System.out.println("Stopping the thread...NOW");
//                            if(!t.interrupted()){
//                                
//                                 Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
//       Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
//       
//       
//           //for(int i=0;i<waterOutletTable.getRowCount();i++)
//           for(Thread thread : threadArray)
//       if(thread.getName().equals(waterOutletTrackTable)){
//       System.out.println("Inside of Stopping thread");
//           t.interrupt();
//           System.out.println("Thread stopped");
//       }
//                            }
//                                      if(!tempFlag){
//                                DefaultTableModel temporaryModel = (DefaultTableModel)waterOutletTrackTable.getModel();
//                                /*for(int i=temporaryModel.getRowCount()-1;i>-1;i--){
//                                      temporaryModel.removeRow(i);*/
//                            if(temporaryModel.getRowCount()>0)          
//                                temporaryModel.removeRow(0);
//                                      }
//      
//                                      //thread.interrupt();
//                                  //}
//                                      //throw new InterruptedException();
//                                  
//                                    
//                                 
                                  
                              //  }
            
        }
        //Method to stop the water outlet if water flow and pressure is above the threshold value and add the waterOutlets in 
        //possibleLeakageTable.
        
        if(rnd==sensor.getFlowRateSample().length-1||rnd==sensor.getPressureRateSample().length-1){
           // System.out.println("RND - "+rnd);
            //System.out.println("Inside Removing function");
            DefaultTableModel possibleLeakage = (DefaultTableModel)possibleLeakageTable.getModel();
          
            //Adding Wateroutlets in Leaked Table
            
           if(possibleLeakage.getRowCount()==0)
           {
                Object[] newRow= new Object[1];
                newRow[0]=waterOutlet;
                possibleLeakage.addRow(newRow);
           }
           else{
               boolean flag=true;
               for(int i=0;i<possibleLeakage.getRowCount();i++)
               {
                    if(possibleLeakage.getValueAt(i, 0).equals(waterOutlet))
                    {
                        flag= false;
                        break;
                    }
               }
               
                if(flag)
                {
                        Object[] newRow= new Object[1];
                        newRow[0]=waterOutlet;
                        possibleLeakage.addRow(newRow);
                }
               
           }
       
           //Removing the water oultet from the WateroutletTracktable
       int counter=0;
       //Checking the position of the WaterOutlet to be removed
       
       while(true && tempFlag)
       {
           if(waterOutletTrackTable.getRowCount()>0)
            if(waterOutletTrackTable.getValueAt(counter, 0).equals(waterOutlet))
            break;
            counter++;
       }
//     
//       Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
//       Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
//       
//       for(Thread thread : threadArray)
//           for(int i=0;i<waterOutletTable.getRowCount();i++)
//       if(thread.getName().equals(waterOutletTrackTable.getValueAt(i,0).toString()))
        t.interrupt();
       //     System.out.println("Thread Name:"+t.getName());
        JOptionPane.showMessageDialog(null,"Water Outlet :"+waterOutlet+" has been forced stop due to possible leakage.");
        //System.out.println("Counter :"+counter);
        DefaultTableModel dtm= (DefaultTableModel)waterOutletTrackTable.getModel();
        if(dtm.getRowCount()>0 && tempFlag)
            model.removeRow(counter);
           break;
           
        }
        if(tempFlag)
        Thread.sleep(2000);
      }
     
    } catch(InterruptedException e) {
         
      System.out.println("sleep interrupted");      
    }
  }
        
        };
        
        t.start();
         
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton initiateInspectionBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable messageStatusTable;
    private javax.swing.JTable possibleLeakageTable;
    private javax.swing.JTextField rainWaterTankCapacityTxtField;
    private javax.swing.JTextField rainfallLevelTxtField;
    private javax.swing.JButton refillRainwaterTank;
    private javax.swing.JButton refillStorageTank;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JTable storageTankTable;
    private javax.swing.JTable waterOutletTable;
    private javax.swing.JTable waterOutletTrackTable;
    // End of variables declaration//GEN-END:variables
}
